- make sure field_serialize is lossless in terms of numeric precision
- fix per face winding in midpoint subdivision
- substitute some of the error assertions or warnings with throw std::runtime_error("my error");
- fix marching tets: degenerate triangles will be generated in some cases (see comments inside cpp file)
- edit HEDRA format to account for labels (similarly to .MESH)
- add ambient occlusion
- add verdict metrics for tris/quads/tets/hexa
- put edge flip and similar operators on separate files
- put cotangents (tets/tris) on a separate .h/cpp file
- add inverse and transpose operators for 2x2 matrices
- refactor ray/line/plane intersections and integral curve tracing 
  (check Robust Polylines Tracing for N-Symmetry Direction Field on Triangulated Surfaces)
- avoid headers from serialized vector and scalar fields (it’s far more general)
- update skeleton data structure (and make relative control panel)
- Gradients on hexmeshes are buggy. hint: check per face normals!
- extend the concept of subdivisions from hexmesh to any mesh
- add Additive Manufacturing stuff (load and process CLI files)…
- Add cylinder and spheres list (with colors, size and so forth) in the render list used for meshes, so that there will be only on unified rendering access point
- Refactor PointInsideMeshCache, it should return ALL the elements containing the
  query point and let the application choose the best one
- Use robust geometric computations (volumes, dihedral angles ecc.) 
  (ref. => Lecture Notes on Geometric Robustness di Jonathan Richard Shewchuk)
- Add cotan laplacian  normalization
  (ref => https://www.ceremade.dauphine.fr/~peyre/teaching/manifold/tp4.html)
- Improve on mesh rendering (shaders, VBOs (https://www.khronos.org/opengl/wiki/VBO_-_just_examples))
