- Polyhedral meshes seem to have duplicated surface vertices ... check it!
- put cotangents (tets/tris) on a separate .h/cpp file
- add inverse and transpose operators for 2x2 matrices
- remove virtual from mesh hierarchy whenever possible
- use Möller–Trumbore algorithm for 3D ray-triangle intersection 
- refactor ray/line/plane intersections and integral curve tracing 
  (check Robust Polylines Tracing for N-Symmetry Direction Field on Triangulated Surfaces)
- add topological operators (add/remove/collapse) also for volumetric meshes
     => then deprecate update_adjacency and make connectivity through poly_add and vert_add instead
        (I already tested for surfaces. The code is much cleaner and loading becomes slightly faster!)
- Add GUI controls: load/save labeling
- avoid headers from serialized vector and scalar fields (it’s far more general)
- update skeleton data structure (and make relative control panel)
- Gradients on hexmeshes are buggy. hint: check per face normals!
- add max_depth to Profiler to avoid lengthy reports
- extend the concept of subdivisions from hexmesh to any mesh
- add Additive Manufacturing stuff (load and process CLI files)…
- Add cylinder and spheres list (with colors, size and so forth) in the render list used for meshes, so that there will be only on unified rendering access point
- Refactor PointInsideMeshCache, it should return ALL the elements containing the
  query point and let the application choose the best one
- Use robust geometric computations (volumes, dihedral angles ecc.) 
  (ref. => Lecture Notes on Geometric Robustness di Jonathan Richard Shewchuk)
- Add cotan laplacian  normalization
  (ref => https://www.ceremade.dauphine.fr/~peyre/teaching/manifold/tp4.html)
- Improve on mesh rendering (shaders, VBOs (https://www.khronos.org/opengl/wiki/VBO_-_just_examples))
